import java.math.BigInteger;

/**
 * A SECP256K1 represents the secp256k1 curve, specifically.
 *
 * @author Sam K
 * @version 1/27/2025
 */
public class SECP256K1 extends Curve {
// Attributes

    /**
     * The generator point of this Curve, as a Point.
     */
    protected static final Point G = new Point(new BigInteger(
            "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798",
            16), new BigInteger(
            "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",
            16));

    /**
     * The "a" coefficient of the short Weierstrass form of this Curve, as a
     * BigInteger.
     */
    private static final BigInteger a = BigInteger.ZERO;

    /**
     * The "b" coefficient of the short Weierstrass form of this Curve, as a
     * BigInteger.
     */
    private static final BigInteger b = BigInteger.valueOf(7);

    /**
     * The prime number to perform modular arithmetic over, as a BigInteger.
     */
    private static final BigInteger p = new BigInteger(
            "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F",
            16);

// Constructors

    /**
     * Constructs a new instance of the SECP256K1 Curve.
     */
    protected SECP256K1() {
        super(SECP256K1.a, SECP256K1.b, SECP256K1.p, SECP256K1.G);
    }

// Methods

    /**
     * Returns the order of the generator point of this Curve. The value is
     * hardcoded as it was calculated ahead of time, and this method overrides
     * for the sake of a more compatible API.
     *
     * @param G The generator point of this Curve.
     *
     * @return The order of the cyclic group generated by G, as a BigInteger.
     */
    @Override
    protected BigInteger order(Point G) {
        return new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A0" +
                              "3BBFD25E8CD0364141", 16);
    }
}
